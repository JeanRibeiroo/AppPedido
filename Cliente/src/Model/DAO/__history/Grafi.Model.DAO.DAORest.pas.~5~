unit Grafi.Model.DAO.DAORest;

interface

uses
  System.JSON,
  Data.DB,
  Grafi.Model.DAO.Interfaces,
  RESTRequest4D,
  System.Classes;

Type

  TModelDAORest = class(TInterfacedObject,IModelDAORest)
    private
      FBaseURL: string;
      FResource: string;
      FContent: string;
      FStreamValue : TMemoryStream;
      //FBory : string;
      FJsonObject: TJSONObject;
      FJsonArray: TJSONArray;
      FDataSet: TDataSet;
      FRequest: IRequest;
      FResponse: IResponse;
      procedure GetError(aCode: IResponse);
    public
      constructor Create;
      destructor  Destroy; override;
      class function New: IModelDAORest;
      function BaseURL(aValue: string): IModelDAORest;
      function Resource(aValue: string): IModelDAORest;
      function Accept(aValue: string): IModelDAORest;
      function ContentType(aValue: string): IModelDAORest;
      function AddQueryParams(aParams, aValue: string): IModelDAORest;
      function AddBody(aValue: TJSONObject): IModelDAORest; overload;
      function AddBody(aValue: TStream): IModelDAORest; overload;
      function BeginParams : IModelDAORest;
      function AddParams(aParams, aValue: string): IModelDAORest;  overload;
      function AddParams(aParams: string; aValue: Integer): IModelDAORest; overload;
      function EndParams: IModelDAORest;
      function AddToken(aValue: string) : IModelDAORest;
      function AddFile(const AName: string; const AValue: TStream): IModelDAORest;
      function Select: IModelDAORest;
      function Post: IModelDAORest;
      function Put: IModelDAORest;
      function Delete: IModelDAORest;
      function ToInt: Integer;
      function ToJsonObject: TJSONObject;
      function ToJsonArray: TJSONArray;
      function ToJsonDataPaginateArray : TJSONArray; overload;
      function ToJsonDataPaginateArray(out aRec : Integer) : TJSONArray; overload;
      function ToDataSet: TDataSet;
      function ToStream : TStream;
  end;

implementation

uses
  LocalCache4D,
  System.SysUtils;

{ TModelDAORest }

function TModelDAORest.Accept(aValue: string): IModelDAORest;
begin
  Result := Self;
  FRequest.Accept(aValue);
end;

function TModelDAORest.AddBody(aValue: TJsonObject): IModelDAORest;
begin
  Result := Self;
  FRequest.AddBody(aValue);
end;

function TModelDAORest.AddBody(aValue: TStream): IModelDAORest;
begin
  Result := Self;
  FRequest.AddBody(aValue);
end;

function TModelDAORest.AddFile(const AName: string; const AValue: TStream): IModelDAORest;
begin
  Result := Self;
  FRequest.AddFile(AName,AValue);
end;

function TModelDAORest.AddParams(aParams: string; aValue: Integer): IModelDAORest;
begin
  Result := Self;
  FJsonObject.AddPair(TJSONPair.Create(aParams, TJSONNumber.Create(aValue)));
end;

function TModelDAORest.AddParams(aParams, aValue: string): IModelDAORest;
begin
  Result := Self;
  FJsonObject.AddPair(TJSONPair.Create(aParams, TJSONString.Create(aValue)));
end;

function TModelDAORest.AddQueryParams(aParams, aValue: string): IModelDAORest;
begin
  Result := Self;
  if not aValue.IsEmpty then
    FRequest.AddParam(aParams, aValue);
end;

function TModelDAORest.AddToken(aValue: string): IModelDAORest;
begin
  Result := Self;
  FRequest.Token(aValue);
end;

function TModelDAORest.BaseURL(aValue: string): IModelDAORest;
begin
  Result := Self;
  FBaseURL := aValue;
end;

function TModelDAORest.BeginParams: IModelDAORest;
begin
  Result := Self;
  if not Assigned(FJsonObject) then
     FJsonObject := TJSONObject.Create;
end;

function TModelDAORest.ContentType(aValue: string): IModelDAORest;
begin
  Result := Self;
  FRequest.ContentType(aValue);
end;

constructor TModelDAORest.Create;
begin
  FJsonObject := nil;
  FJsonArray := nil;
  FJsonObject := nil;
  FRequest := TRequest.New;
  FRequest.RaiseExceptionOn500(false);
end;

function TModelDAORest.Delete: IModelDAORest;
var LResult: IResponse;
begin
  Result := Self;
  LResult :=
  FRequest
      .BaseURL(FBaseURL + FResource)
    .Delete;
  GetError(LResult);
end;

destructor TModelDAORest.Destroy;
begin
  if Assigned(FStreamValue) then
    FreeAndNil(FStreamValue);
  inherited;
end;

function TModelDAORest.EndParams: IModelDAORest;
begin
  Result := Self;
  FRequest.AddBody(FJsonObject);
end;

procedure TModelDAORest.GetError(aCode: IResponse);
var LDescription: string;
begin
  if aCode.StatusCode > 399 then
  begin
    TJSONObject(aCode.JSONValue).TryGetValue<string>('description', LDescription);
    raise Exception.Create(LDescription);
  end;
end;

class function TModelDAORest.New: IModelDAORest;
begin
  Result := Self.Create;
end;

function TModelDAORest.Post: IModelDAORest;
var LResult: IResponse;
begin
  Result := Self;
  LResult :=
    FRequest
        .BaseURL(FBaseURL + FResource)
      .Post;
  GetError(LResult);
  FContent := LResult.Content;
end;

function TModelDAORest.Put: IModelDAORest;
var LResult: IResponse;
begin
  Result := Self;
  LResult :=
     FRequest
        .BaseURL(FBaseURL + FResource)
      .Put;
  GetError(LResult);
  FContent := LResult.Content;
end;

function TModelDAORest.Resource(aValue: string): IModelDAORest;
begin
  Result := Self;
  FResource := aValue;
end;

function TModelDAORest.Select: IModelDAORest;
var ateste:string;
begin
  Result := Self;
  ateste := FBaseURL + FResource + FRequest.FullRequestURL;
  FResponse :=
    FRequest
      .BaseURL(FBaseURL + FResource)
      .Get;
  GetError(FResponse);

  FContent := FResponse.Content;
end;

function TModelDAORest.ToDataSet: TDataSet;
begin
 // Result := TJSONObject.ParseJSONValue(FContent)
end;

function TModelDAORest.ToInt: Integer;
var LJsonResult: TJSONObject;
begin
  LJsonResult := TJSONObject.ParseJSONValue(FContent) as TJsonObject;
  try
      Result :=  LJsonResult.GetValue<Integer>('id');
  finally
    if Assigned(LJsonResult) then
      LJsonResult.Free;
  end;
end;

function TModelDAORest.ToJsonArray: TJSONArray;
begin
  Result := TJSONObject.ParseJSONValue(FContent) as TJSONArray;
end;

function TModelDAORest.ToJsonDataPaginateArray: TJSONArray;
var LJsonResult: TJSONObject;
begin
  Result := nil;
  try
   LJsonResult := TJSONObject.ParseJSONValue(FContent) as TJSONObject;
   Result := LJsonResult.GetValue<TJSONArray>('data').Clone as TJSONArray ;
  finally
    LJsonResult.Free;
  end;

end;

function TModelDAORest.ToJsonDataPaginateArray(out aRec : Integer) : TJSONArray;
var LJsonResult: TJSONObject;
begin
  Result := nil;
  LJsonResult := nil;
  try
   LJsonResult := TJSONObject.ParseJSONValue(FContent) as TJSONObject;
   aRec :=  LJsonResult.GetValue<Integer>('records');
   Result := LJsonResult.GetValue<TJSONArray>('data').Clone as TJSONArray ;
  finally
    LJsonResult.Free;
  end;
end;

function TModelDAORest.ToJsonObject: TJSONObject;
begin
  Result := TJSONObject.ParseJSONValue(FContent) as TJsonObject;
end;

function TModelDAORest.ToStream: TStream;
begin
 FStreamValue := TMemoryStream.Create;
 FStreamValue.CopyFrom(FResponse.ContentStream, 0);
 Result := FStreamValue;
end;

end.
