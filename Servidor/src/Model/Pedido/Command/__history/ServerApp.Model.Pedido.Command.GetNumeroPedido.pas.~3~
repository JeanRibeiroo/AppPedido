unit ServerApp.Model.Pedido.Command.GetNumeroPedido;



interface



Type

  TModelCommnadGetnumeroPedido = class(TInterfacedObject, ICommand)
    private
      [weak]
      FModel: IModelFornecedor;
    public
      constructor Create(aValue: IModelFornecedor);
      destructor Destroy; override;
      class function New(aValue: IModelFornecedor): ICommand;
      function Execute : ICommand;
  end;

implementation

uses
  System.SysUtils,
  System.JSON,
  System.Generics.Collections,
  ServidorAPI.Model.Exception,
  ServidorApp.Model.Fornecedor.Fornecedor;



{ TModelCommnadGetnumeroPedido }

constructor TModelCommnadGetnumeroPedido.Create(aValue: IModelFornecedor);
begin
  FModel := aValue;
end;

destructor TModelCommnadGetnumeroPedido.Destroy;
begin

  inherited;
end;

function TModelCommnadGetnumeroPedido.Execute: ICommand;
var lParams: TDictionary<string, string>;
begin
  Result := Self;
  try
    lParams := TDictionary<string, string>.Create;
    lParams.Add('Razao', FModel.Entity.PessoaJuridica.Razao);
    try
      var lFornecedor := TModelFornecedor.New(FModel.DataSet, lParams).Get;
      lFornecedor.Free;
      raise Exception.Create('Esse Fornecedor já Existe.');
    Except
      On E:EEmpytQuery do
        Exit;
      on E: Exception do
        Raise;
    end;
  finally
    lParams.Free;
  end;
end;

class function TModelCommnadGetnumeroPedido.New(aValue: IModelFornecedor): ICommand;
begin
  Result := Self.Create(aValue);
end;

end.

